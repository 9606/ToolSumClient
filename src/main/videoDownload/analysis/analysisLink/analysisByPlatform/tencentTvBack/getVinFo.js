import { webcrypto } from 'crypto'
import {generateWasm, setBufferValue, stringToUint8Array} from './initWasm.js'

const subtle = webcrypto.subtle

function toUint8Array (e, t) {
    var o = e.replace(/=/g, "").replace(/-/g, "+").replace(/_/g, "/");
    if (t && masks[t]) {
        var i = masks[t].split("")
            , A = o.split("");
        o = A.map((function(e, t) {
                return String.fromCharCode(e.charCodeAt(0) ^ i[t].charCodeAt(0))
            }
        )).join("")
    }
    var r = atob(o);
    return new Uint8Array(r.length).map((function(e, t) {
            return r.charCodeAt(t)
        }
    ))
}

function toUint8Array2 (e) {
    for (var t = [], o = 0; o < e.length; o += 1) {
        var A = e.charCodeAt(o);
        A < 128 ? t.push(A) : A < 2048 ? t.push(192 | A >> 6, 128 | 63 & A) : A < 55296 || A >= 57344 ? t.push(224 | A >> 12, 128 | A >> 6 & 63, 128 | 63 & A) : (o += 1,
            A = 65536 + ((1023 & A) << 10 | 1023 & e.charCodeAt(o)),
            t.push(240 | A >> 18, 128 | A >> 12 & 63, 128 | A >> 6 & 63, 128 | 63 & A))
    }
    return new Uint8Array(t)
}

function fromUint8Array (e) {
    for (var t = new Uint8Array(e), o = t.byteLength, A = "", i = 0; i < o; ) {
        var r = t[i++];
        if (0 == (128 & r))
            A += String.fromCharCode(r);
        else if (192 == (224 & r))
            A += String.fromCharCode((31 & r) << 6 | 63 & t[i++]);
        else if (224 == (240 & r))
            A += String.fromCharCode((15 & r) << 12 | (63 & t[i++]) << 6 | 63 & t[i++]);
        else {
            var n = (7 & r) << 18 | (63 & t[i++]) << 12 | (63 & t[i++]) << 6 | 63 & t[i++];
            A += String.fromCharCode(55296 | n - 65536 >> 10, 56320 | n - 65536 & 1023)
        }
    }
    return A
}

async function func1(data) {
    const rawArray = [
        48,
        130,
        2,
        119,
        2,
        1,
        0,
        48,
        13,
        6,
        9,
        42,
        134,
        72,
        134,
        247,
        13,
        1,
        1,
        1,
        5,
        0,
        4,
        130,
        2,
        97,
        48,
        130,
        2,
        93,
        2,
        1,
        0,
        2,
        129,
        129,
        0,
        192,
        153,
        231,
        200,
        86,
        62,
        2,
        184,
        136,
        164,
        153,
        218,
        56,
        69,
        34,
        45,
        180,
        5,
        148,
        44,
        168,
        87,
        160,
        122,
        44,
        88,
        97,
        105,
        201,
        120,
        97,
        50,
        20,
        70,
        229,
        119,
        54,
        221,
        51,
        232,
        212,
        190,
        170,
        151,
        129,
        204,
        216,
        108,
        131,
        100,
        105,
        191,
        162,
        229,
        119,
        146,
        99,
        119,
        147,
        143,
        153,
        25,
        175,
        221,
        165,
        103,
        56,
        120,
        155,
        48,
        64,
        255,
        55,
        193,
        184,
        67,
        255,
        60,
        198,
        223,
        233,
        150,
        245,
        96,
        172,
        205,
        219,
        107,
        220,
        210,
        134,
        67,
        222,
        236,
        2,
        23,
        205,
        4,
        60,
        14,
        8,
        187,
        241,
        99,
        241,
        210,
        233,
        42,
        162,
        164,
        210,
        4,
        23,
        18,
        62,
        38,
        189,
        136,
        252,
        16,
        165,
        185,
        231,
        77,
        75,
        16,
        37,
        95,
        2,
        3,
        1,
        0,
        1,
        2,
        129,
        128,
        52,
        141,
        73,
        251,
        21,
        221,
        17,
        172,
        252,
        75,
        189,
        87,
        23,
        167,
        117,
        109,
        247,
        2,
        214,
        173,
        96,
        185,
        152,
        37,
        253,
        215,
        151,
        172,
        223,
        182,
        34,
        255,
        33,
        29,
        63,
        27,
        74,
        51,
        13,
        40,
        232,
        115,
        165,
        228,
        117,
        28,
        73,
        169,
        66,
        40,
        177,
        218,
        2,
        62,
        142,
        99,
        185,
        20,
        53,
        133,
        39,
        7,
        37,
        62,
        225,
        169,
        184,
        99,
        58,
        58,
        45,
        23,
        98,
        37,
        97,
        191,
        251,
        191,
        47,
        63,
        84,
        168,
        255,
        89,
        135,
        11,
        242,
        220,
        126,
        196,
        173,
        172,
        223,
        236,
        138,
        18,
        207,
        48,
        39,
        234,
        184,
        149,
        63,
        23,
        57,
        45,
        91,
        107,
        87,
        123,
        25,
        73,
        192,
        81,
        21,
        14,
        0,
        57,
        247,
        106,
        80,
        91,
        14,
        41,
        230,
        160,
        246,
        177,
        2,
        65,
        0,
        236,
        140,
        157,
        212,
        227,
        218,
        95,
        173,
        32,
        191,
        233,
        176,
        45,
        145,
        74,
        4,
        11,
        99,
        249,
        201,
        166,
        15,
        7,
        132,
        6,
        84,
        167,
        214,
        172,
        252,
        15,
        2,
        56,
        122,
        68,
        146,
        43,
        56,
        99,
        233,
        168,
        78,
        43,
        7,
        254,
        103,
        41,
        189,
        255,
        89,
        251,
        231,
        22,
        84,
        242,
        228,
        236,
        231,
        208,
        217,
        33,
        142,
        232,
        205,
        2,
        65,
        0,
        208,
        112,
        45,
        122,
        239,
        103,
        222,
        243,
        84,
        17,
        135,
        8,
        231,
        47,
        61,
        22,
        115,
        94,
        48,
        67,
        252,
        201,
        247,
        139,
        217,
        27,
        233,
        116,
        209,
        35,
        242,
        16,
        23,
        235,
        3,
        141,
        214,
        208,
        125,
        236,
        119,
        228,
        240,
        44,
        159,
        13,
        88,
        8,
        204,
        1,
        34,
        247,
        130,
        171,
        75,
        56,
        156,
        21,
        64,
        84,
        50,
        130,
        246,
        219,
        2,
        65,
        0,
        209,
        58,
        207,
        160,
        46,
        170,
        73,
        86,
        105,
        81,
        86,
        242,
        110,
        91,
        196,
        140,
        47,
        71,
        14,
        250,
        61,
        215,
        173,
        94,
        41,
        251,
        87,
        57,
        155,
        104,
        152,
        29,
        238,
        182,
        183,
        80,
        82,
        202,
        94,
        21,
        158,
        185,
        5,
        118,
        220,
        159,
        131,
        92,
        123,
        48,
        172,
        143,
        138,
        65,
        57,
        87,
        35,
        245,
        39,
        213,
        230,
        200,
        241,
        65,
        2,
        64,
        29,
        184,
        177,
        51,
        131,
        105,
        187,
        71,
        213,
        39,
        254,
        170,
        77,
        84,
        214,
        16,
        26,
        121,
        70,
        198,
        155,
        8,
        45,
        141,
        58,
        115,
        25,
        113,
        247,
        212,
        121,
        82,
        196,
        38,
        85,
        198,
        102,
        232,
        41,
        220,
        139,
        40,
        16,
        251,
        59,
        222,
        202,
        59,
        206,
        227,
        38,
        154,
        70,
        126,
        168,
        102,
        53,
        19,
        110,
        173,
        210,
        218,
        11,
        219,
        2,
        65,
        0,
        221,
        162,
        29,
        17,
        112,
        181,
        60,
        26,
        25,
        170,
        17,
        75,
        135,
        62,
        36,
        31,
        231,
        131,
        131,
        64,
        239,
        16,
        33,
        139,
        146,
        249,
        88,
        193,
        115,
        8,
        110,
        215,
        198,
        23,
        63,
        148,
        48,
        200,
        83,
        112,
        179,
        24,
        158,
        198,
        134,
        146,
        225,
        183,
        14,
        114,
        61,
        40,
        5,
        53,
        153,
        141,
        96,
        44,
        49,
        28,
        89,
        69,
        228,
        109
    ]
    const rawUnit = new Uint8Array(rawArray);
    const aa = await subtle.importKey('pkcs8', rawUnit,{"name": "RSA-OAEP", "hash": "SHA-1"}, false, ["decrypt"] )

    const bb = await subtle.decrypt(
        { name: "RSA-OAEP" },
        aa,
        data
    )
    return bb
}

async function func2(param1, param2, data) {
    const key1 = toUint8Array2(param1)
    const key2 = toUint8Array2(param2)
    const aa = await subtle.importKey('raw', key1, {"name": "AES-CBC"}, false, ["decrypt"]);
    const bb = await subtle.decrypt(
        { name: "AES-CBC", iv: key2 },
        aa,
        data
    )
    return bb
}

async function func3(param1, param2, data) {
    console.log(11111, param1, param2)
    const key1 = toUint8Array2(param1)
    const key2 = toUint8Array2(param2)
    const aa = await subtle.importKey('raw', key1, {"name": "AES-CBC"}, false, ["decrypt"]);

    const bb = await subtle.decrypt(
        { name: "AES-CBC", iv: key2 },
        aa,
        data
    )
    console.log(111111111)
    return bb
}

export async function decryptProcess (vinfo) {
    const playData = JSON.parse(vinfo)
    const playJson = JSON.parse(fromUint8Array(toUint8Array(playData.anc)))
    const rcUnit8Array = toUint8Array(playJson.rc)

    const rcArrayBuffer = await func1(rcUnit8Array)
    const rcInfo = fromUint8Array(rcArrayBuffer)
    const param1 = JSON.parse(rcInfo).algo_params[0]
    const param2 = JSON.parse(rcInfo).algo_params[1]
    const algList = await func2(param1, param2, toUint8Array(playJson.aanc))
    const algListJson = JSON.parse(fromUint8Array(algList)).algo_list;
    const m5hAlgo = algListJson.find((item) => item.algo_id === 'm5h0zchrh5')
    const m5hKey1 = m5hAlgo.algo_params[0];
    const m5hKey2 = m5hAlgo.algo_params[1];
    const jsonList = await func3(m5hKey1, m5hKey2, toUint8Array(playJson.anc))
    // 转换数据
    const otherAlgo = algListJson.find((item) => item.algo_id !== 'm5h0zchrh5')
    const { wasmInstance, dataView, un167} = await generateWasm()
    let result = null
    if(otherAlgo.algo_params.length < 2) {

        const key24 = otherAlgo.algo_params[0]
        const key24Array = stringToUint8Array(key24, 24)
        setBufferValue(dataView, key24Array, 69176)
        const resultUint8Array = new Uint8Array(jsonList)
        // setBufferValue(dataView, resultUint8Array, 69208)
        const value2 = wasmInstance.T15(69208, resultUint8Array.length, 69176)
        // const mm = wasmInstance.nMY(69176)
        // wasmInstance.nMY(69208)
        // wasmInstance.nMY(128104)
        result = new Uint8Array(un167).slice(value2, value2 + resultUint8Array.length)
    } else {
        const key40 = otherAlgo.algo_params[0]
        const key20 = otherAlgo.algo_params[1]
        const key40Array = stringToUint8Array(key40, 40)
        const key20Array = stringToUint8Array(key20, 20)
        setBufferValue(dataView, key40Array, 69176)
        setBufferValue(dataView, key20Array, 69224)
        const resultUint8Array = new Uint8Array(jsonList)
        setBufferValue(dataView, resultUint8Array, 69248)
        const value2 = wasmInstance.FhV(69248, resultUint8Array.length, 69176, 69224)
        result = new Uint8Array(un167).slice(value2, value2 + resultUint8Array.length)
    }
    return fromUint8Array(result)
}
