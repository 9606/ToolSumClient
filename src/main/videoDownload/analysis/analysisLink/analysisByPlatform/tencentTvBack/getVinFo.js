import { webcrypto } from 'crypto'
import {generateWasm, setBufferValue, stringToUint8Array} from './initWasm.js'

const subtle = webcrypto.subtle

function toUint8Array (e, t) {
    var o = e.replace(/=/g, "").replace(/-/g, "+").replace(/_/g, "/");
    if (t && masks[t]) {
        var i = masks[t].split("")
            , A = o.split("");
        o = A.map((function(e, t) {
                return String.fromCharCode(e.charCodeAt(0) ^ i[t].charCodeAt(0))
            }
        )).join("")
    }
    var r = atob(o);
    return new Uint8Array(r.length).map((function(e, t) {
            return r.charCodeAt(t)
        }
    ))
}

function toUint8Array2 (e) {
    for (var t = [], o = 0; o < e.length; o += 1) {
        var A = e.charCodeAt(o);
        A < 128 ? t.push(A) : A < 2048 ? t.push(192 | A >> 6, 128 | 63 & A) : A < 55296 || A >= 57344 ? t.push(224 | A >> 12, 128 | A >> 6 & 63, 128 | 63 & A) : (o += 1,
            A = 65536 + ((1023 & A) << 10 | 1023 & e.charCodeAt(o)),
            t.push(240 | A >> 18, 128 | A >> 12 & 63, 128 | A >> 6 & 63, 128 | 63 & A))
    }
    return new Uint8Array(t)
}

function fromUint8Array (e) {
    for (var t = new Uint8Array(e), o = t.byteLength, A = "", i = 0; i < o; ) {
        var r = t[i++];
        if (0 == (128 & r))
            A += String.fromCharCode(r);
        else if (192 == (224 & r))
            A += String.fromCharCode((31 & r) << 6 | 63 & t[i++]);
        else if (224 == (240 & r))
            A += String.fromCharCode((15 & r) << 12 | (63 & t[i++]) << 6 | 63 & t[i++]);
        else {
            var n = (7 & r) << 18 | (63 & t[i++]) << 12 | (63 & t[i++]) << 6 | 63 & t[i++];
            A += String.fromCharCode(55296 | n - 65536 >> 10, 56320 | n - 65536 & 1023)
        }
    }
    return A
}

async function func1(data) {
    const rawArray = [
        48,
        130,
        2,
        119,
        2,
        1,
        0,
        48,
        13,
        6,
        9,
        42,
        134,
        72,
        134,
        247,
        13,
        1,
        1,
        1,
        5,
        0,
        4,
        130,
        2,
        97,
        48,
        130,
        2,
        93,
        2,
        1,
        0,
        2,
        129,
        129,
        0,
        198,
        7,
        197,
        183,
        100,
        19,
        55,
        84,
        240,
        78,
        208,
        240,
        180,
        192,
        21,
        100,
        66,
        216,
        243,
        212,
        115,
        171,
        0,
        166,
        198,
        41,
        182,
        167,
        186,
        21,
        222,
        227,
        121,
        238,
        103,
        166,
        120,
        41,
        5,
        148,
        113,
        24,
        233,
        169,
        163,
        212,
        24,
        215,
        156,
        81,
        21,
        205,
        20,
        204,
        168,
        134,
        241,
        29,
        243,
        59,
        172,
        131,
        78,
        155,
        201,
        76,
        228,
        158,
        0,
        100,
        112,
        108,
        11,
        112,
        41,
        40,
        32,
        108,
        40,
        115,
        139,
        36,
        130,
        17,
        29,
        241,
        145,
        63,
        146,
        202,
        132,
        55,
        239,
        111,
        2,
        238,
        45,
        163,
        228,
        12,
        199,
        199,
        68,
        82,
        97,
        80,
        124,
        255,
        111,
        106,
        84,
        2,
        191,
        83,
        38,
        129,
        127,
        78,
        79,
        47,
        209,
        0,
        132,
        39,
        254,
        135,
        14,
        25,
        2,
        3,
        1,
        0,
        1,
        2,
        129,
        129,
        0,
        130,
        41,
        49,
        167,
        172,
        187,
        132,
        174,
        235,
        148,
        162,
        120,
        212,
        21,
        60,
        250,
        61,
        133,
        228,
        30,
        76,
        56,
        165,
        160,
        248,
        183,
        10,
        59,
        140,
        112,
        59,
        164,
        64,
        204,
        150,
        140,
        48,
        134,
        166,
        8,
        63,
        158,
        36,
        87,
        64,
        59,
        116,
        104,
        163,
        114,
        24,
        102,
        71,
        185,
        141,
        59,
        196,
        215,
        238,
        187,
        214,
        84,
        40,
        33,
        203,
        169,
        11,
        220,
        244,
        71,
        120,
        90,
        70,
        224,
        202,
        18,
        236,
        199,
        197,
        184,
        60,
        19,
        166,
        88,
        125,
        199,
        175,
        87,
        47,
        226,
        245,
        115,
        96,
        123,
        180,
        207,
        49,
        180,
        255,
        37,
        231,
        42,
        205,
        178,
        193,
        188,
        185,
        235,
        232,
        200,
        220,
        137,
        121,
        209,
        97,
        194,
        50,
        42,
        213,
        183,
        73,
        127,
        141,
        173,
        208,
        167,
        98,
        1,
        2,
        65,
        0,
        250,
        169,
        86,
        204,
        106,
        218,
        134,
        187,
        255,
        221,
        47,
        36,
        164,
        89,
        74,
        163,
        28,
        14,
        147,
        35,
        202,
        77,
        148,
        191,
        135,
        241,
        215,
        112,
        37,
        109,
        66,
        134,
        60,
        153,
        235,
        19,
        88,
        133,
        177,
        113,
        35,
        10,
        124,
        216,
        65,
        190,
        20,
        223,
        31,
        115,
        92,
        71,
        84,
        174,
        117,
        106,
        27,
        114,
        16,
        119,
        164,
        58,
        137,
        17,
        2,
        65,
        0,
        202,
        63,
        122,
        25,
        144,
        145,
        95,
        156,
        32,
        255,
        137,
        146,
        244,
        130,
        148,
        104,
        10,
        105,
        134,
        90,
        124,
        153,
        60,
        24,
        200,
        27,
        21,
        245,
        22,
        63,
        183,
        164,
        5,
        165,
        233,
        80,
        176,
        7,
        205,
        132,
        21,
        154,
        76,
        68,
        90,
        177,
        59,
        27,
        153,
        112,
        83,
        106,
        230,
        64,
        12,
        234,
        186,
        14,
        101,
        186,
        3,
        152,
        116,
        137,
        2,
        64,
        13,
        56,
        219,
        132,
        66,
        234,
        174,
        10,
        194,
        175,
        103,
        42,
        54,
        165,
        35,
        35,
        193,
        122,
        31,
        86,
        214,
        248,
        10,
        173,
        163,
        189,
        37,
        17,
        28,
        88,
        76,
        23,
        10,
        161,
        79,
        222,
        32,
        96,
        69,
        0,
        227,
        201,
        76,
        214,
        151,
        121,
        48,
        94,
        168,
        169,
        12,
        40,
        19,
        22,
        116,
        201,
        25,
        19,
        134,
        60,
        217,
        99,
        225,
        17,
        2,
        64,
        68,
        150,
        44,
        65,
        25,
        46,
        195,
        158,
        189,
        238,
        10,
        232,
        164,
        52,
        216,
        65,
        68,
        46,
        175,
        26,
        102,
        160,
        204,
        169,
        150,
        202,
        224,
        178,
        97,
        222,
        47,
        215,
        214,
        246,
        129,
        222,
        20,
        36,
        65,
        68,
        230,
        210,
        145,
        196,
        168,
        128,
        236,
        11,
        155,
        8,
        101,
        177,
        157,
        237,
        224,
        179,
        133,
        111,
        54,
        126,
        83,
        147,
        211,
        9,
        2,
        65,
        0,
        198,
        254,
        74,
        114,
        4,
        242,
        158,
        188,
        200,
        147,
        144,
        129,
        29,
        45,
        102,
        255,
        198,
        211,
        199,
        212,
        95,
        232,
        137,
        114,
        216,
        58,
        59,
        186,
        168,
        204,
        48,
        237,
        91,
        214,
        232,
        79,
        71,
        23,
        134,
        70,
        190,
        184,
        9,
        118,
        46,
        91,
        210,
        51,
        197,
        68,
        25,
        14,
        170,
        39,
        39,
        208,
        12,
        172,
        144,
        171,
        48,
        194,
        202,
        120
    ]
    const rawUnit = new Uint8Array(rawArray);
    const aa = await subtle.importKey('pkcs8', rawUnit,{"name": "RSA-OAEP", "hash": "SHA-1"}, false, ["decrypt"] )

    const bb = await subtle.decrypt(
        { name: "RSA-OAEP" },
        aa,
        data
    )
    return bb
}

async function func2(param1, param2, data) {
    const key1 = toUint8Array2(param1)
    const key2 = toUint8Array2(param2)
    const aa = await subtle.importKey('raw', key1, {"name": "AES-CBC"}, false, ["decrypt"]);
    const bb = await subtle.decrypt(
        { name: "AES-CBC", iv: key2 },
        aa,
        data
    )
    return bb
}

async function func3(param1, param2, data) {
    const key1 = toUint8Array2(param1)
    const key2 = toUint8Array2(param2)
    const aa = await subtle.importKey('raw', key1, {"name": "AES-CBC"}, false, ["decrypt"]);
    const bb = await subtle.decrypt(
        { name: "AES-CBC", iv: key2 },
        aa,
        data
    )
    return bb
}

export async function decryptProcess (vinfo) {
    const playData = JSON.parse(vinfo)
    const playJson = JSON.parse(fromUint8Array(toUint8Array(playData.anc)))
    const rcUnit8Array = toUint8Array(playJson.rc)
    const rcArrayBuffer = await func1(rcUnit8Array)
    const rcInfo = fromUint8Array(rcArrayBuffer)
    const param1 = JSON.parse(rcInfo).algo_params[0]
    const param2 = JSON.parse(rcInfo).algo_params[1]
    const algList = await func2(param1, param2, toUint8Array(playJson.aanc))
    const algListJson = JSON.parse(fromUint8Array(algList)).algo_list;
    const m5hAlgo = algListJson.find((item) => item.algo_id === 'm5h0zchrh5')
    const m5hKey1 = m5hAlgo.algo_params[0];
    const m5hKey2 = m5hAlgo.algo_params[1];
    const otherAlgo = algListJson.find((item) => item.algo_id !== 'm5h0zchrh5')
    // 转换数据
    let result = null
    if(otherAlgo) {
        const { wasmInstance, dataView, un167} = await generateWasm()
        if(otherAlgo.algo_params.length < 2) {
            const m5hIndex = algListJson.findIndex((item) => item.algo_id === 'm5h0zchrh5')
            if(m5hIndex == 0) {
                const key24 = otherAlgo.algo_params[0]
                const key24Array = stringToUint8Array(key24, 24)
                setBufferValue(dataView, key24Array, 69176)
                const resultUint8Array = toUint8Array(playJson.anc)
                setBufferValue(dataView, resultUint8Array, 69208)
                wasmInstance.j73(24)
                wasmInstance.j73(resultUint8Array.length)
                const value2 = wasmInstance.T15(69208, resultUint8Array.length, 69176)
                const jsonList = new Uint8Array(un167).slice(value2, value2 + resultUint8Array.length)
                result = await func3(m5hKey1, m5hKey2, jsonList)
            } else {
                const jsonList = await func3(m5hKey1, m5hKey2, toUint8Array(playJson.anc))
                const key24 = otherAlgo.algo_params[0]
                const key24Array = stringToUint8Array(key24, 24)
                setBufferValue(dataView, key24Array, 69176)
                const resultUint8Array = new Uint8Array(jsonList)
                setBufferValue(dataView, resultUint8Array, 69208)
                wasmInstance.j73(24)
                wasmInstance.j73(resultUint8Array.length)
                const value2 = wasmInstance.T15(69208, resultUint8Array.length, 69176)
                result = new Uint8Array(un167).slice(value2, value2 + resultUint8Array.length)
            }

        } else {
            const m5hIndex = algListJson.findIndex((item) => item.algo_id === 'm5h0zchrh5')
            if(m5hIndex == 0) {
                const key40 = otherAlgo.algo_params[0]
                const key20 = otherAlgo.algo_params[1]
                const key40Array = stringToUint8Array(key40, 40)
                const key20Array = stringToUint8Array(key20, 20)
                setBufferValue(dataView, key40Array, 69176)
                setBufferValue(dataView, key20Array, 69224)
                const resultUint8Array = toUint8Array(playJson.anc)
                setBufferValue(dataView, resultUint8Array, 69248)
                const value2 = wasmInstance.FhV(69248, resultUint8Array.length, 69176, 69224)
                const jsonList = new Uint8Array(un167).slice(value2, value2 + resultUint8Array.length)
                result = await func3(m5hKey1, m5hKey2, jsonList)
            } else {
                const jsonList = await func3(m5hKey1, m5hKey2, toUint8Array(playJson.anc))
                const key40 = otherAlgo.algo_params[0]
                const key20 = otherAlgo.algo_params[1]
                const key40Array = stringToUint8Array(key40, 40)
                const key20Array = stringToUint8Array(key20, 20)
                setBufferValue(dataView, key40Array, 69176)
                setBufferValue(dataView, key20Array, 69224)
                const resultUint8Array = new Uint8Array(jsonList)
                setBufferValue(dataView, resultUint8Array, 69248)
                const value2 = wasmInstance.FhV(69248, resultUint8Array.length, 69176, 69224)
                result = new Uint8Array(un167).slice(value2, value2 + resultUint8Array.length)
            }
        }
    } else {
        const jsonList = await func3(m5hKey1, m5hKey2, toUint8Array(playJson.anc))
        result = fromUint8Array(jsonList)
    }
    return fromUint8Array(result)
}
